---
- name: Setup Linux
  hosts: localhost
  #gather_facts: no
  become: no
  vars:
    locale: ja_JP.UTF-8
    zone: Asia/Tokyo
    zoneinfo_path: /usr/share/zoneinfo/Asia/Tokyo
    python_version: 2.7.13
    python3_version: 3.5.3
    neovim_repository: https://github.com/neovim/neovim.git
    neovim_version: v0.2.0
    dein_installer: https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh
    tmux_repository: https://github.com/tmux/tmux.git
    tmux_version: 2.3

  roles:
    - { role: common }

  tasks:
    - name: Setup anyenv
      args:
        # guard for only once.
        creates: ~/.anyenv
      shell: |
        git clone https://github.com/riywo/anyenv ~/.anyenv
        (
          echo 'export PATH="$HOME/.anyenv/bin:$PATH"'
          echo 'eval "$(anyenv init -)"'
          echo 'for D in `ls $HOME/.anyenv/envs`'
          echo 'do'
          echo '  export PATH="$HOME/.anyenv/envs/$D/shims:$PATH" '
          echo 'done'
        ) >> ~/.bash_profile

    - name: Install anyenv
      git: repo=https://github.com/riywo/anyenv dest=~/.anyenv

    - name: Install anyenv-update
      git: repo=https://github.com/znz/anyenv-update.git dest=~/.anyenv/plugins/anyenv-update

    - name: Install pyenv
      args:
        # guard for only once.
        creates: ~/.anyenv/envs/pyenv
      shell: |
        anyenv install pyenv

    - name: Install pyenv-virtualenv
      git: repo=https://github.com/yyuu/pyenv-virtualenv.git dest=~/.anyenv/envs/pyenv/plugins/pyenv-virtualenv

    - name: Update all envs
      changed_when: False
      register: result
      shell: anyenv update

    - name: Install python {{ python_version }}
      args:
        # guard for only once.
        creates: ~/.anyenv/envs/pyenv/versions/{{ python_version }}
      shell: |
        pyenv install {{ python_version }}
        pyenv global {{ python_version }}

    - name: Install python {{ python3_version }}
      args:
        # guard for only once.
        creates: ~/.anyenv/envs/pyenv/versions/{{ python3_version }}
      shell: pyenv install {{ python3_version }}

    - name: Create python virtualenv for neovim2
      args:
        # guard for only once.
        creates: ~/.anyenv/envs/pyenv/versions/neovim2
      shell: pyenv virtualenv {{ python_version }} neovim2

    - name: Install neovim2
      changed_when: '"Requirement already up-to-date: neovim" not in result.stdout'
      register: result
      shell: |
        bash -l -c 'pyenv activate neovim2; pip install -U neovim'

    - name: Create python virtualenv for neovim3
      args:
        # guard for only once.
        creates: ~/.anyenv/envs/pyenv/versions/neovim3
      shell: pyenv virtualenv {{ python3_version }} neovim3

    - name: Install neovim3
      changed_when: '"Requirement already up-to-date: neovim" not in result.stdout'
      register: result
      shell: |
        bash -l -c 'pyenv activate neovim3; pip install -U neovim'

    - name: Install pip packages
      pip: name={{ item }} state=latest
      with_items:
        - pip
        - flake8
        - awscli

    - name: Check neovim already installed
      register: which_nvim
      failed_when: which_nvim.rc not in [0, 1]
      changed_when: False
      shell: which nvim

    - name: Build and Install neovim
      when: which_nvim.rc == 1
      shell: |
        git clone {{ neovim_repository }} /tmp/neovim
        cd /tmp/neovim
        git checkout {{ neovim_version }}
        CMAKE_BUILD_TYPE=RelWithDebInfo make >/dev/null
        sudo make install

    - name: Prepare install dein
      file: path=~/.cache state=directory

    - name: Install dein
      args:
        # guard for only once.
        creates: ~/.cache/dein/repos/github.com/Shougo/dein.vim
      shell: |
        curl -fsSL {{ dein_installer }} > /tmp/install.sh
        sh /tmp/install.sh ~/.cache/dein
        rm -f /tmp/install.sh

    - name: Get latest peco version
      changed_when: False
      register: peco_latest_version
      shell: curl -sI https://github.com/peco/peco/releases/latest | awk -F'/' '/^Location:/{print $NF}'

    - name: Download latest peco
      changed_when: False
      shell: curl -kL https://github.com/peco/peco/releases/download/{{ peco_latest_version.stdout }}/peco_linux_amd64.tar.gz -o /tmp/peco_linux_amd64.tar.gz

    - name: Extract peco
      unarchive: src=/tmp/peco_linux_amd64.tar.gz dest=/tmp/

    - name: Install /usr/local/bin/peco
      become: true
      copy: src=/tmp/peco_linux_amd64/peco dest=/usr/local/bin/ mode=0755

    - name: Check tmux already installed
      register: tmux_installed
      failed_when: tmux_installed.rc not in [0, 1]
      changed_when: False
      shell: which tmux && tmux -V | grep {{ tmux_version }}

    - name: Build and Install tmux
      when: tmux_installed.rc == 1
      shell: |
        git clone {{ tmux_repository }} /tmp/tmux
        cd /tmp/tmux
        git checkout {{ tmux_version }}
        sh autogen.sh >/dev/null
        ./configure >/dev/null
        make >/dev/null
        sudo make install

    - name: Prezto
      git: repo=https://github.com/sorin-ionescu/prezto.git dest=~/.zprezto

    - name: Prepare conf
      file: path=~/.config state=directory

    - name: Create zsh directory
      file: path=~/.zsh state=directory recurse=yes

    - name: Install anyframe
      git: repo=https://github.com/mollifier/anyframe.git dest=~/.zsh/anyframe

    - name: Lynk conf files
      file:
        src: ~/.dotfiles/{{ item }}
        dest: ~/{{ item }}
        state: link
      with_items:
        - .ctags
        - .config/htop
        - .config/nvim
        - .flake8rc
        - .gitconfig
        - .gitignore
        - .globalrc
        - .pythonrc.py
        - .snippets
        - .tmux.conf
        - .zlogin
        - .zlogout
        - .zshenv
        - .zshrc
        - .zpreztorc
        - .zprofile
        - bin
