Info file: emacs-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


Emacs 20.6版対応に改訂した`GNU Emacs Manual' 13版です.

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* Emacs: (emacs).	The extensible self-documenting text editor.
END-INFO-DIR-ENTRY


Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1996, 1997, 1998,
1999 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the Free Software Foundation instead of in the
original English.





File: emacs-ja  Node: Manifesto-Footnotes, Up: Manifesto

(1) ここの言葉遣いは不注意であった.  意図することは, 誰もGNUシステムを
使う*許可*のために支払う必要はない, という意味である.  しかし, こ
れでも明確になっていないし, GNUの複写は常にほとんどまたは全くの無料で
配布されるべきであると言われていると解釈している人が多い.  後述で, こ
の宣言では, 利益のために配布サービスを提供している企業の可能性について
述べているように, これは意図した意味では決してない.  その後, 私は, 自
由という意味の『フリー』と価格という意味の『無料』を注意深く区別するよ
うになった.  フリー・ソフトウェアとは, 配布する自由と変更する自由をユー
ザが持っているソフトウェアのことである.  無料でコピーを入手するかもし
れないユーザもいれば, コピーの入手に支払うユーザもいるかもしれない. 
また, 集まったお金がソフトウェアの改良支援となればますます良いことであ
る.  重要なことは, コピーを持っている人は誰でも, そのコピーの使用にあ
たり, 他人と協力するための自由があるという点である.

(2) これは, 2種類の意味を持つ『フリー』について私が注意深く区別するの
を怠ったもう1つの箇所である.  この文は文字どおりの意味である.  つまり,
GNUソフトウェアのコピーを友人やネット経由で無料で入手することができる, 
という意味である.  ただし, 間違った考え方を提示してしまっている.

(3) そのような企業は現に数社存在する.

(4) Free Software Foundationは企業ではなく慈善団体ではあるが, 配布サー
ビスで資金の大半を調達している.  FSFへの注文によってコピーを入手する人
がいなくなると, 作業ができなくなるだろう.  しかし, これは独占的制限に
よってユーザに支払いを強要することが正しいという意味ではない.  たとえ
小さな注文であってもユーザ全てがFSFへコピーを発注してくれれば, それだ
けでFSFは借金をしないで済む.  あなたなりに何か貢献しているのか？

(5) コンピュータ企業が数社集まって, GNU Cコンパイラの保守をサポートす
るための資金を最近共同出資した.


File: emacs-ja, Node: Glossary, Next: Key Index, Prev: Intro, Up: Top

用語集
******

ASCII印字文字（ASCII printing character）
     ASCII印字文字には, アルファベット, 数字, 空白, `!@#$%^&
     *()_-+=|\~` {}[]:;"' <>,.?/'などの区切り文字が含まれる.

ASCIIコントロール文字（ASCII control character）
     ASCIIコントロール文字は, 大文字のコントロール版か, 文字`@[\]^_?'
     のコントロール版のいずれかである.

ASCII文字（ASCII character）
     ASCII文字は, ASCIIコントロール文字かASCII印字文字のいずれかである.
     *Note User Input::.

`C-'
     文字の名前の`C-'は, コントロール（Control）の略である.  *Note C-:
     User Input.

`C-M-'
     文字の名前の`C-M-'は, コントロール・メタ（Control-Meta）の略であ
     る.  *Note C-M-: User Input.

Copyleft
     copyleft（コピーレフト）とは, プログラムやその他の創作結果を再配
     布することを合法的に公に許可を与える旨の告示である.  自由と協調を
     推進する左派のプログラマはcopyleftを使い, 他人に権力を振いたい右
     派のプログラマはcopyright（コピーライト）を使う.

     GNUプロジェクトで用いているcopyleftは, GNU一般公有使用許諾書（GNU
     General Public License）と呼ばれる.  *Note Copying::.

DEL
     DELは, テキストの1文字を削除するコマンドを実行する文字である.
     *Note DEL: Basic.

Dired
     diredとは, ファイルディレクトリの中身を表示し, ディレクトリ内のファ
     イルを操作して『ディレクトリの編集』を可能にするEmacsの機能である.
     *Note Dired::.

ESC
     ESCは, METAキーがないキーボードで, メタ文字を入力するためのプレ
     フィックスとして利用する文字である.  （SHIFTキーのようにキーを押
     し下げたまま別の文字を打ち込む）METAキーと違い, 普通の文字キーを
     打ち込むようにESCキーを打ち込むと, つぎに打ち込んだ文字に（ESCキー
     が）適用される.

HELP
     HELPとは, `C-h'やF1を指すEmacsの名前である.  どのような選択枝があ
     るかを調べたり, コマンドが何をするかを調べるには, いつでもHELPを
     押せばよい.  *Note Help::.

Inbox
     inboxとは, オペレーティングシステムが配達するメイルを収めるファイ
     ルである.  rmailは, inboxからrmailファイル《参照》にメイルを移動
     する.  rmailファイル内のメイルは, 明示的に消さない限り, 恒久的に
     保存される.

`M-'
     文字の名前の中の`M-'は, METAの省略形であり, 任意の文字に付くこと
     が可能な修飾キーの1つである.  *Note User Input::.

`M-C-'
     文字の名前の中の`M-C-'は, コントロール・メタ（Control-Meta）の略
     であり, `C-M-'と同じ意味である.  METAキーがない端末では, コントロー
     ル・メタ文字を打ち込むには, ESCを打ち込んでから該当するコントロー
     ル文字を打ち込む.  *Note C-M-: User Input.

`M-x'
     `M-x'は, Emacsコマンドを名前で呼び出すために用いるキー列である. 
     これにより, キー列にバインド（束縛）されていないコマンドを実行で
     きる.  *Note M-x::.

MULE（ミュール）
     MULEとは, マルチバイト文字《参照》の機能を用いて非ASCIIテキストを
     編集するEmacsの機能を指す.  *Note International::.

Regexp
     「正規表現」を参照.

RET
     RETは, Emacsにおいて, テキストに改行を挿入するコマンドを実行する
     文字である.  ミニバッファ《参照》においては, ほとんどの引数読み取
     りの完了にも使う.  *Note Return: User Input.

rmailファイル（Rmail File）
     rmailファイルは, rmailがメイルを保存するために使用する特別な形式
     のテキストを収めたファイルである.  *Note Rmail::.

S式（Sexp）
     S式（sexpは「s-expression」の短縮形）とは, Lispのテキスト形式にお
     ける基本的な文法単位であり, リストかLispのアトムである.  Emacsに
     は, S式を操作する数多くのコマンドがある.  「sexp」という用語は,
     Lisp以外の言語に対しても一般化され, 構文則で認識可能な式を意味す
     る.  *Note Sexps: Lists.

termscriptファイル（Termscript File）
     termscriptファイルには, Emacsが端末に送ったすべての文字が記録され
     る.  Emacsの再表示のバグを追跡するために使う.  指示しない限り
     termpscriptファイルは作成されない.  *Note Bugs::.

WYSIWYG
     WYSIWYGは, 「What you see is what you get」（見たとおりを得る）の
     略語である.  Emacsでは, 一般に, 文字ファイルの編集にはWYSIWYGを提
     供する.  エンリッチ（enriched）モード（*Note Formatted Text::）で
     は, テキスト整形情報を含むファイルの編集にもWYSIWYGを提供する.

アボート（Aborting）
     アボートとは, 再帰編集《参照》から脱出すること.  コマンド`C-]'
     (1) (*Note Glossary-Footnotes::) や`M-x top-level'はこのために使
     う.  *Note Quitting::.

アルト（Alt）
     アルトは, キーボードからの入力文字に付く修飾ビットの名前である. 
     アルト文字にするには, ALTキーを押し下げたまま文字を打ち込む.  こ
     のような文字は, `Alt-'（普通は縮めて`A-'）で始まる名前になる. 
     （多くの端末にはALTと刻印したキーがあるが, 実際にはMETAキーとして
     働く. ）*Note Alt: User Input.

アンドゥ（Undoing）
     アンドゥとは, 編集過程で（時間的に）まえに存在していたテキストを
     もとに戻して, 以前に行った編集の効果を逆向きにすることである.
     *Note Undo::.

一次セレクション（Primary Selection）
     一次セレクションとは, Xのセレクション《参照》の一種であり, アプリ
     ケーション間でテキストを転送するためにXの数多くのアプリケーション
     が用いるセレクションである.

     Emacsのキルコマンドは, 一次セレクションを設定し, ヤンクコマンドは, 
     適切ならば, 一次セレクションを用いる.  *Note Killing::.

ウィンドウ（Window）
     Emacsでは, フレーム《参照》を複数のウィンドウに分割し, 各ウィンド
     ウにはつねに1つのバッファ《参照》の内容を表示できる.  Emacsの画面
     の利用法に関する基本的なことがらについては, *Note Screen::.  ウィ
     ンドウの使用法を制御するコマンドについては, *Note Windows::.

ウィンドウの削除（Deletion of Windows）
     ウィンドウの削除とは, 画面からウィンドウを除去することである.  空
     いた場所を埋めるように他のウィンドウが延びる.  削除したウィンドウ
     は二度ともとに戻らないが, それで実際のテキストが失われるわけでは
     ない.  *Note Windows::.

上書きモード（Overwrite Modes）
     上書き（overwrite）モードは, マイナモードである.  このモードが有
     効であると, 普通のテキスト文字は, ポイント直後に押し込まれるので
     はなく, ポイント直後の既存のテキストを置き換える.  *Note Minor
     Modes::.

エコー（Echoing）
     エコーとは, （エコー領域に）表示することでコマンドを受理したこと
     を伝えることである.  Emacsは1文字のキー列をけっしてエコーしない.
     2文字以上のキー列の場合, 打ち込みに間を置くとエコーする.

エコー領域（Echo Area）
     エコー領域は, 画面の最後の行であり, コマンドの引数を表示したり, 
     問い合わせたり, （エラーメッセージを含む）簡素なメッセージの表示
     に使われる.  メッセージはバッファ`*Messages*'に保存されるので, あ
     とから見ることもできる.  *Note Echo Area::.

エラー（Error）
     現在の状況ではEmacsコマンドを実行できないときに, エラーが起きる. 
     エラーが起きると, コマンドの実行は（コマンドが何か別のことをする
     ようにプログラムされていない限り）止まり, Emacsはエラーメッセージ
     《参照》を表示してエラーを報告する.  すでに打ち込んだ文字は捨てら
     れる.  そして, Emacsは他の編集コマンドを読める状態になる.

エラーメッセージ（Error Message）
     エラーメッセージとは, ユーザーが（バッファの最後にポイントがある
     のに, ポイントよりうしろのテキストをキルするなどの）実行不可能な
     ことを要求したときに, Emacsが表示する1行のメッセージである.  エラー
     メッセージはエコー領域に表示されベルが鳴る.

エレクトリック（Electric）
     通常は自己挿入《参照》と定義されていて, 現在のメジャーモード《参
     照》では別のものにも再定義されているような文字を, エレクトリック
     であるという.  たとえば, プログラム言語用のメジャーモードでは, 特
     定の区切り文字を自己挿入に加えて, 行を字下げし直したり, 空行を挿
     入するように定義する.

大文字小文字変換（Case Conversion）
     大文字小文字変換とは, テキストの大文字を小文字に変換すること, あ
     るいは, その逆に変換することである.  大文字小文字変換のコマンドに
     ついては, *Note Case::.

押し下げイベント（Down Event）
     「ボタン押し下げイベント」の略.

カーソル（Cursor）
     カーソルとは, 挿入や削除が行われるポイント《参照》と呼ばれる位置
     を表す画面上の矩形である.  カーソルは, ポイントのうしろにある文字
     の前景か背景にある.  「ポイント」のことを意味して「カーソル」とい
     うことが多い.  *Note Cursor: Basic.

改行（Newline）
     バッファ内の文字Control-Jは, テキストの行の終りなので, 改行と呼ば
     れる.  *Note Newline: Text Characters.

カスタマイズ（Customization）
     カスタマイズとは, Emacsの動作を少々変更することである.  変数
     （*Note Variables::）を設定したり, キー列をリバインド（再束縛）す
     る（*Note Keymaps::）ことでカスタマイズを行うことが多い.

括弧の対応付け（Balance Parentheses）
     Emacsは手動でも自動でも括弧を対応付けられる.  手動対応付けは, 対
     応した式のあいだを移動するコマンドで可能である（*Note Lists::）. 
     自動対応付けは, 挿入した括弧に対応するものを点滅したり, 強調表示
     することで可能である（*Note Matching Parens: Matching..）.

カレントバッファ（Current Buffer）
     Emacsのカレントバッファとは, ほとんどの編集コマンドが実行される
     Emacsバッファのことである.  任意のEmacsバッファをカレントバッファ
     として選択できる.  *Note Buffers::.

完結キー（Complete Key）
     完結キーとは, Emacsが実行する1つの動作を完全に指定するキー列であ
     る.  たとえば, `X', `C-f', `C-x m'は完結キーである.  完結キーは, 
     コマンド《参照》にバインド《参照》されていることでその意味が与え
     られる.  したがって, `X'は, 通常, バッファに`X'を挿入するコマンド
     にバインドされている.  `C-x m'は, 通常, メイルメッセージを作成す
     るコマンドにバインドされている.  *Note Keys::.

関数定義（Defun）
     defunは, プログラムのトップレベルにある括弧構造のリストである. 
     この名称は, Lispプログラムにおいてこのようなリストが, （関数を定
     義する）Lisp関数defunの呼び出しになっていることに由来する.  *Note
     Defuns::.

間接バッファ（Indirect Buffer）
     間接バッファとは, ベースバッファと呼ばれる別のバッファとテキスト
     を共有するバッファである.  *Note Indirect Buffers::.

キーボード変換表（Keyboard Translation Table）
     キーボード変換表とは, 端末からの入力文字コードをキー列を構成する
     文字コードへ変換する配列である.  *Note Keyboard Translations::.

キーボードマクロ（Keyboard Macro）
     キーボードマクロとは, Lispプログラムを書かずに, 既存のコマンド列
     から新たなEmacsコマンドを定義する方法である.  *Note Keyboard
     Macros::.

キーマップ（Keymap）
     キーマップとは, コマンドを起動するキー列のバインディング《参照》
     を記録したデータ構造である.  たとえば, グローバルキーマップでは, 
     文字`C-n'をコマンド関数`next-line'にバインド（束縛）する.  *Note
     Keymaps::.

キー列（Key Sequence）
     キー列（縮めてキー）とは, 1つの単位として意味がある入力イベント
     《参照》の列である.  キー列が1つの動作を特定するのに十分な長さが
     あれば, それは完結キー《参照》である.  十分でなければプレフィック
     スキー《参照》である.  *Note Keys::.

行揃え（Justification）
     行揃えとは, 指定した幅にちょうど収まるようにテキスト行に余分な空
     白を加えることである.  *Note Justification: Filling.

強調表示（Highlighting）
     テキストを強調表示するとは, バッファ内の他のテキストに比してめだ
     つように前景色や背景色を変えて表示することである.

切り捨て（Truncation）
     表示画面においてテキスト行を切り捨てるとは, テキストを表示するウィ
     ンドウの右端に収まらない部分を無視することである.  「継続行」も参
     照.  *Note Truncation: Basic.

キル（Killing）
     キルとは, テキストを取り去り, あとでヤンク《参照》できるようにキ
     ルリングに保存することである.  他のシステムではこれを『カット』と
     呼ぶ.  テキストを取り去るほとんどのEmacsコマンドは, 削除《参照》
     ではなくキルを行う.  *Note Killing::.

キルリング（Kill Ring）
     キルリングとは, 最近にキルしたすべてのテキストを保存する場所であ
     る.  リングの中にあるキルしたテキストは, いつでも再度挿入できる. 
     これをヤンク《参照》するという.  *Note Yanking::.

空行（Blank Lines）
     空行は白文字だけを含む行である.  Emacsには, バッファ内の空行を操
     作するコマンドがある.

クォート（Quoting）
     クォートとは, 文字が通常有する特別な意味を奪うことである.  Emacs
     においてもっとも一般的なクォートは, `C-q'を使う.  何が特別な意味
     となるかは, 文脈や約束事に依存する.  たとえば, Emacsのコマンドと
     しての『普通』の文字は, その文字自身を挿入する.  したがって, この
     文脈においては, 特別な文字とは, （たとえば, DELなどの）文字自身を
     挿入しない文字のことであり, クォートすると, 特別な文字ではないと
     して, 文字自身を挿入する.  どんな文脈でもクォートが許されるとは限
     らない.  *Note Quoting: Basic.

矩形領域（Rectangle）
     矩形領域は, 与えられた範囲の行の与えられた範囲の桁のテキストから
     成る.  通常, 矩形領域を指定するには, 一方の角にポイントを置き, 対
     角にマークを置く.  *Note Rectangles::.

クリックイベント（Click Event）
     クリックイベントとは, マウスボタンを押し下げて移動せずに放したと
     きに生成される入力イベントの一種である.  *Note Mouse Buttons::.

グローバル（Global）
     グローバル（大域的）というのは, 「現在の環境とは独立であり, 実質
     的にEmacs全体に適用する」ということである.  これは, ローカル（局
     所的）《参照》とは反対の概念である.  「グローバル」の典型的な利用
     例は以下にある.

グローバルキーマップ（Global Keymap）
     グローバルキーマップ《参照》は, メジャーモードのローカルキーマッ
     プ《参照》によりローカルキーバインドが優先する場合を除いて有効に
     なるキーバインドを保持する.  *Note Keymaps::.

グローバル置換（Global Substitution）
     グローバル置換とは, 長大なテキストにおいて, ある文字列を他の文字
     列で置き換えることである.  *Note Replace::.

グローバル変数（Global Variable）
     変数《参照》のグローバルな値は, バッファ独自に変数のローカルな値
     を持たないすべてのバッファに影響する.  *Note Variables::.

グローバルマークリング（Global Mark Ring）
     グローバルマークリングには, 最近にマークを置いたバッファの系列を
     記録する.  多くの場合, 今までに編集したバッファやタグを探したバッ
     ファを辿り直すのにこのリングを使える.  *Note Global Mark Ring::.

グローバル略語（Global Abbrev）
     略語《参照》のグローバルな定義は, ローカル《参照》な定義に同じ略
     語がないすべてのメジャーモードにおいて有効である.  *Note
     Abbrevs::.

継続行（Continuation Line）
     テキスト行がウィンドウの幅より長いと, 表示すると画面上では1行を越
     える.  このようなテキスト行は継続しているといい, テキスト行に対応
     する表示行の2行目以降のすべての表示行を継続行と呼ぶ.  *Note
     Continuation: Basic.

言語環境（Language Environment）
     言語環境を選ぶと, 入力方式《参照》とコーディングシステム《参照》
     のデフォルトが指定される.  *Note Language Environments::.  これら
     のデフォルトは, 非ASCIIのテキストを編集する人に関係ある.  （*Note
     International::）.

現在行（Current Line）
     ポイント（*Note Point::）がある行.

現在の関数定義（Current Defun）
     ポイントがある関数定義（defun）《参照》.  関数定義のあいだにポイ
     ントがある場合には, 現在の関数定義はポイントのうしろにあるもので
     ある.  *Note Defuns::.

現在の段落（Current Paragraph）
     ポイントがある段落.  段落のあいだにポイントがある場合には, 現在の
     段落はポイントのうしろにあるものである.  *Note Paragraphs::.

コーディングシステム（Coding System）
     コーディングシステムとは, ファイルや情報ストリームにおいてテキス
     ト文字を表現するための符号化である.  Emacsには, ファイルの読み書
     き時に, さまざまなコーディングシステム間でテキストを変換する機能
     がある.  *Note Coding Systems::.

構文解析（Parsing）
     Emacsコマンドの中には, 編集中のテキストを単語や式として構文解析す
     るものがある.  実際には, 単語や式の端をみつける方法を知っている程
     度である.  *Note Syntax::.

構文テーブル（Syntax Table）
     構文テーブルは, 単語を構成する文字, 括弧のような互いに釣り合う文
     字などを, Emacsに教える.  *Note Syntax::.

コマンド（Command）
     コマンドとは, Emacsにおいてキーバインディングとなりうるように特別
     に定義されたLisp関数である.  キー列《参照》を打ち込むと, 実行すべ
     きコマンドを決定するために, 適切なキーマップ《参照》からキー列の
     バインディング《参照》を探す.  *Note Commands::.

コマンド名（Command Name）
     コマンド名とは, コマンド（*Note Commands::）であるLispシンボルの
     名前である.  `M-x'を使えば任意のコマンドを名前で起動できる. 
     （*Note M-x::）.

コメント（Comment）
     コメント（注釈）とは, プログラムを読む人間だけを対象としたプログ
     ラム内のテキストであり, プログラムをロードしたりコンパイルすると
     きには無視するように特殊な印が付いている.  Emacsには, コメントを
     作成, 整列, キルするコマンドがある.  *Note Comments::.

コントロール文字（Control Character）
     コントロール文字とは, CTRLキーを押し下げたまま打ち込んだ文字のこ
     とである.  コントロール文字のなかには独自のキーを持つものもあり, 
     それらはCTRLを使わずに打ち込める.  たとえば, RET, TAB, ESC, DELは
     コントロール文字である.  *Note User Input::.

コンパイル（Compilation）
     コンパイルとは, ソースコードから実行プログラムを作成する処理であ
     る.  Emacsには, Emacs Lispコード（*Note バイトコンパイル:
     (elisp-ja)Byte Compilation..）やCなどの他の言語で書いたプログラム
     のファイルをコンパイルするコマンドがある.  （*Note Compilation::）.

再帰編集レベル（Recursive Editing Level）
     再帰編集レベルとは, コマンドの実行過程において, ユーザーにテキス
     ト編集を依頼した状態のことである.  このテキストは, コマンドを適用
     したテキストと同じかもしれないし, 違うかもしれない.  モード行には, 
     角括弧（`['と`]'）で再帰編集レベルが示される.  *Note Recursive
     Edit::.

再表示（Redisplay）
     再表示とは, 編集中のテキストの変更に対応するように, 画面上の表示
     を修正する処理のことである.  *Note Redisplay: Screen.

削除（Deletion）
     削除とは, キルリング《参照》へコピーせずにテキストを除去すること
     である.  他の手段にはキル《参照》がある.  *Note Deletion:
     Killing.

自己挿入文字（Self-Inserting Character）
     打ち込んだ文字自身がバッファに挿入される場合, その文字は自己挿入
     である.  Emacsでは, 特定のメジャーモードを除いて, 普通の印字文字
     や白文字は自己挿入文字である.

字下げ（Indentation）
     字下げとは, 行の始めにある空白のことである.  ほとんどのプログラム
     言語では, プログラムの構造を明らかにするために字下げを使う習慣が
     ある.  Emacsには, 字下げを調整する特別なコマンドがある.  *Note
     Indentation::.

自動詰め込みモード（Auto Fill Mode）
     自動詰め込み（auto-fill）モードはマイナモードであり, 挿入したテキ
     ストは固定幅の行に収まるように自動的に分割される.  *Note
     Filling::.

自動保存（Auto Saving）
     自動保存とは, Emacsバッファの内容を特別な名前のファイルに保存する
     行為のことであり, システムのエラーやユーザーのエラーでバッファが
     失われても, 情報が消えないようにする.  *Note Auto Save::.

主rmailファイル（Primary Rmail File）
     主rmailファイルとは, ホームディレクトリにある`RMAIL'という名前の
     ファイルである.  別のファイル名を指定しない限り, rmailが届いたメ
     イルを保存する場所である.  *Note Rmail::.

使用禁止コマンド（Disabled Command）
     使用禁止コマンドとは, 特別な確認なしには実行できないコマンドであ
     る.  コマンドを使用禁止にしておくのは, そのコマンドが初心者を困惑
     させるからである.  *Note Disabling::.

ジョブの強制終了（Killing Jobs）
     （Emacsの起動などの）ジョブを強制終了するとは, ジョブの存続を終ら
     せることである.  ジョブ内のデータは, ファイルに保存していなければ
     失われる.  *Note Exiting::.

白文字（Whitespace）
     白文字とは, 連続した整形用の文字（空白（スペース）, タブ, 改行, 
     バックスペース）である.

スーパー（Super）
     スーパーは, キーボードからの入力文字に付く修飾ビットの名前である. 
     スーパー文字にするには, SUPERキーを押し下げたまま文字を打ち込む. 
     このような文字は, `Super-'（普通は縮めて`s-'）で始まる名前になる.
     *Note Super: User Input.

数引数（Numeric Argument）
     数引数は数であり, コマンドよりまえに指定してコマンドの効果を変え
     る.  多くの場合, 数引数は反復回数を指定する.  *Note Arguments::.

スクロール（Scrolling）
     スクロールとは, Emacsウィンドウ内のテキストを動かして, バッファの
     別の部分が見えるようにすることである.  *Note Scrolling: Display.

スクロールバー（Scroll Bar）
     スクロールバーは, ウィンドウの端に現れる細長い中空の箱である.  ウィ
     ンドウをスクロールするには, スクロールバー内でマウスコマンドを使
     う.  スクロールバーの機能はXだけで使える.  *Note Scroll Bars::.

図形文字（Graphic Character）
     図形文字とは, 名称だけでなく絵的な像も割り当てられた文字である. 
     メタ《参照》でないすべての文字は, コントロール《参照》文字を除い
     て図形文字である.  アルファベット, 数字, 区切り文字, 空白が含まれ
     るが, RETやESCは含まれない.  Emacsでは, （通常の編集モードでは）
     図形文字を打ち込むとその文字が挿入される.  *Note Basic Editing:
     Basic.

正規表現（Regular Expression）
     正規表現とは, さまざまなテキスト文字列に一致可能なパターンである. 
     たとえば, `l[0-9]+'は, `l'のうしろに1個以上の数字が続いた文字列に
     一致する.  *Note Regexps::.

整形済みテキスト（Formatted Text）
     整形済みテキストとは, 編集中に整形情報に従って表示されるテキスト
     である.  整形情報には, フォント, 表示色, 左右端などがある.  *Note
     Formatted Text::.

制限（Restriction）
     バッファの制限とは, バッファの先頭や末尾で一時的に参照不可になっ
     ているテキスト量のことである.  バッファにゼロでない制限を課すこと
     を, ナロイング《参照》と呼ぶ.  *Note Narrowing::.

節（Sentences）
     Emacsには, 節単位に移動したり削除するコマンドがある.  *Note
     Sentences::.

セルフドキュメント（Self-Documentation）
     セルフドキュメントとは, コマンドが何をするものか教えたり, 指定し
     た話題に関係するすべてのコマンドの一覧を提示するEmacsの機能である. 
     ヘルプ文字`C-h'でセルフドキュメントを読むことができる.  *Note
     Help::.

セレクション（Selection）
     Xウィンドウシステムでは, アプリケーションプログラムがテキストを値
     とする名前付きのセレクションを指定できる.  プログラムは, 他のプロ
     グラムが設定したセレクションを読むこともできる.  これは, ウィンド
     ウアプリケーションのあいだでテキストを転送するもっとも基本的な方
     法である.  Emacsには, 一次セレクション《参照》と二次セレクション
     《参照》に対処するコマンドがある.

選択する（Selecting）
     バッファを選択するとは, そのバッファをカレントバッファ《参照》と
     することである.  *Note Selecting: Buffers.

前置引数（Prefix Argument）
     「数引数」を参照.

相互ロック（Interlocking）
     相互ロックとは, すでに誰かが編集しているファイルを変更しようとす
     ると警告する機能である.  *Note Simultaneous Editing:
     Interlocking.

挿入（Insertion）
     挿入とは, キーボードやEmacs内の他の場所からバッファにテキストをコ
     ピーすることである.

タグテーブル（Tags Table）
     タグテーブルとは, 複数のファイルに定義された関数の索引の役割を果
     たすファイルである.  *Note Tags::.

単語探索（Word Search）
     単語探索とは, 単語の区切りを無視して単語の列を探索することである.
     *Note Word Search::.

単語の略語（Word Abbrev）
     「略語」の同義語.

探索（Searching）
     探索とは, 指定した文字列のつぎの出現位置, あるいは, 指定した正規
     表現のつぎの一致位置へポイントを動かすことである.  *Note
     Search::.

探索パス（Search Path）
     探索パスとは, ディレクトリ名のリストであり, ある目的に使うファイ
     ルを探すために利用される.  たとえば, 変数`load-path'は, Lispのラ
     イブラリファイルを探すための探索パスを保持する.  *Note Lisp
     Libraries::.

段落（Paragraph）
     段落とは, 英文テキストの中程度の大きさの塊である.  段落間を移動し
     たり段落を操作する専用のEmacsコマンドがある.  *Note Paragraphs::.

置換（Replacement）
     「グローバル置換」を参照.

中断（Quitting）
     中断とは, `C-g'（MS-DOSでは`C-BREAK'）を使って, 打鍵途中のコマン
     ドや実行中のコマンドを取り消すことである.  *Note Quitting::.

詰め込み（Filling）
     テキストの詰め込みとは, すべての行がほぼ同じ長さになるように, 連
     続した行のテキストの配置を変えることである.  *Note Filling::.

詰め込み接頭辞（Fill Prefix）
     詰め込み接頭辞とは, 詰め込みが完了したときに, 各行の先頭にあるべ
     き文字列のことである.  これは詰め込むべきテキストの一部としてはみ
     なされない.  *Note Filling::.

ディレクトリ（Directory）
     ファイルディレクトリとは, ファイルシステムにおいて名前が付けられ
     た集まりであり, その中にはファイルやサブディレクトリを置くことが
     できる.  *Note Directories::.

テキスト（Text）
     2つの意味がある（*Note Text::）

        * 文字の列から成るデータであり, 2進数, 画像, 図形コマンド, 実
          行ファイルなどと対比される.  Emacsバッファの内容は, この意味
          においてつねにテキストである.
        * 自然言語で書かれたデータであり, プログラム, 自然言語の文体を
          変換したのもと対比される.

テキストの移動（Moving Text）
     テキストの移動とは, ある場所からテキストを取り去り, 別の場所へ挿
     入することである.  テキストを移動するもっとも普通の方法は, キル
     《参照》してからヤンク《参照》することである.  *Note Killing::.

デフォルトディレクトリ（Default Directory）
     `/'や`~'で始まらないファイル名を指定すると, それはカレントバッファ
     のデフォルトディレクトリ相対に解釈される.  *Note Default
     Directory: Minibuffer File.

デフォルト引数（Default Argument）
     引数のデフォルトとは, 特に指定しないときに仮定される値のことであ
     る.  引数を読むのにミニバッファを使うとき, RETだけを打ち込むとデ
     フォルト引数が使われる.  *Note Minibuffer::.

転置（Transposition）
     テキストの2つの塊を転置するとは, それぞれをもう一方が占めていた場
     所へ置くことである.  Emacsには, 連続した文字, 単語, S式《参照》, 
     行を転置するコマンドがある.  （*Note Transpose::）.

同時編集（Simultaneous Editing）
     同時編集とは, 同じファイルを一度に2人のユーザーで編集することを意
     味する.  同時編集を検知できないと, 一方のユーザーの作業結果が失わ
     れる危険性がある.  Emacsは, 同時編集が起こるすべての状況を検知し, 
     一方のユーザーに注意を促す.  *Note Simultaneous Editing:
     Interlocking.

トップレベル（Top Level）
     トップレベルとは, Emacsの通常の状態であり, この状態において訪れた
     ファイルを編集している.  再帰編集レベル《参照》やミニバッファ《参
     照》に入っていない, コマンドの実行途中でないならば, トップレベル
     にいる.  アボート《参照》したり中断《参照》すると, トップレベルに
     戻ることができる.  *Note Quitting::.

ドラッグイベント（Drag Event）
     ドラッグイベントとは, 入力イベントの一種であり, マウスボタンを押
     し下げたままマウスを動かしてからボタンを放すと発生する.  *Note
     Mouse Buttons::.

ドリブルファイル（Dribble File）
     ユーザーがキーボードから打ち込んだすべての文字を書き込むファイル. 
     ドリブルファイルは, Emacsのバグのデバッグ用の記録を作るために使わ
     れる.  指示しない限りEmacsはドリブルファイルを作成しない.  *Note
     Bugs::.

名前付きマーク（Named Mark）
     名前付きマークとは, レジスタ《参照》であり, その場所へポイントを
     移動できるようにテキスト内の場所を記録する役割がある.  *Note
     Registers::.

ナロイング（Narrowing）
     ナロイングとは, カレントバッファのテキストの一部分のみが編集対象
     となるように制限《参照》を設けることである.  境界を広げない限り, 
     境界の外側にあるテキストを参照することはできないが, テキストは存
     続しているのでファイルへ保存するとバッファの内容すべてが保存され
     る.  *Note Narrowing::.

二次セレクション（Secondary Selection）
     二次セレクションとは, Xのセレクションの一種である.  Xのアプリケー
     ションには, 他のアプリケーションとテキストを転送するために二次セ
     レクションを使うものがある.  Emacsには, 二次セレクションを使って
     テキストを転送する特別なマウスコマンドがある.  *Note Secondary
     Selection::.

入力イベント（Input Event）
     Emacsにおいて, 入力イベントはユーザーが端末で行った1つの操作を表
     す.  入力イベントには, 文字の打ち込み, ファンクションキーの打ち込
     み, マウスボタンを押したり放したりすること, Emacsフレームの切り替
     えがある.

入力方式（Input Method）
     入力方式とは, ASCII文字《参照》の列を打ち込んで非ASCIIのテキスト
     文字を入力する方法である.  *Note Input Methods::.

ハードコピー（Hardcopy）
     ハードコピーとは, 印刷した出力のことである.  Emacsには, Emacsバッ
     ファ内のテキストを印刷するコマンドがある.  *Note Hardcopy::.

ハイパー（Hyper）
     ハイパーは, キーボードからの入力文字に付く修飾ビットの名前である. 
     ハイパー文字にするには, HYPERキーを押し下げたまま文字を打ち込む. 
     このような文字は, `Hyper-'（普通は縮めて`H-'）で始まる名前になる.
     *Note Hyper: User Input.

バインディング（Binding）
     Emacsにおいてキー列が意味を持つには, バインディング, つまり, その
     キー列を打ち込むと実行されるLisp関数であるコマンド《参照》が与え
     られる必要がある.  *Note Binding: Commands.  カスタマイズでは, 文
     字に別のコマンド関数をリバインド（再束縛）することがよく行われる. 
     すべてのキー列のバインディングはキーマップ《参照》に記録される.
     *Note Keymaps::.

バインド（Bind）
     キー列をバインド（束縛）するとは, キー列にバインディング《参照》
     を与えることである.  *Note Rebinding::.

バックアップファイル（Backup File）
     バックアップファイルは, 現在の編集作業を始めるまえのファイルの内
     容を記録している.  Emacsは, 後悔した場合に備えて, 変更を見直した
     り取り消すために自動的にバックアップファイルを作成する.  *Note
     Backup::.

バッファ（Buffer）
     バッファは基本的な編集単位である.  1つのバッファは編集中の1つのテ
     キストに対応する.  複数のバッファを使えるが, ある時点で編集できる
     のはたった1つの『選択した』バッファのみである.  しかし, 複数のウィ
     ンドウ《参照》を使えば, 同時に複数のバッファを眺めることもできる. 
     ほとんどのバッファはファイルを訪問《参照》したものである.  *Note
     Buffers::.

バッファ選択履歴（Buffer Selection History）
     Emacsは, 各バッファがどの程度最近に選択されたかをバッファ選択履歴
     に記録する.  この記録は, 選択するバッファを選ぶのに使われる.
     *Note Buffers::.

版管理（Version Control）
     版管理（バージョンコントロール）システムは, ソースファイルの複数
     の版の記録を取っておく.  バックアップファイル《参照》を取っておく
     よりもずっと強力な方法を提供する.  *Note Version Control::.

反復回数（Repeat Count）
     「数引数」を参照.

ファイルの削除（Deletion of Files）
     ファイルの削除とは, それをファイルシステムから除去することである.
     *Note Misc File Ops::.

ファイル名（File Name）
     ファイル名とはファイルを指す名前である.  ファイル名は相対的か絶対
     的である.  相対ファイル名の意味はカレントディレクトリに依存するが, 
     一方, 絶対ファイル名は現在どのディレクトリにいるかに関係なくつね
     に同じファイルを指す.  GNUやUNIXシステムでは, 絶対ファイル名は
     （ルートディレクトリである）スラッシュや（ホームディレクトリであ
     る）`~/'や`~USER/'で始まる.

     ファイル名のかわりに『パス名』という用語を使う人もいるが, 本書で
     は使わない.  単語『パス』は『探索パス』《参照》という用語にしか使
     わない.

ファイル名のクォート（Quoting File Names）
     ファイル名をクォートすると, `$', `~', `:'などの構成要素の特別な意
     味を抑える.  *Note Quoted File Names::.

ファイル名の構成要素（File-Name Component）
     ファイル名の構成要素は, あるディレクトリ内のファイルを直接指名す
     る.  GNUやUNIXシステムでは, ファイル名とはファイル名の構成要素を
     スラッシュで区切った列である.  たとえば, `foo/bar'は2つの構成要素,
     `foo'と`bar'から成り, カレントディレクトリ内の`foo'という名前のディ
     レクトリ内の`bar'というファイルを指す.

ファイルロック（File Locking）
     Emacsは, 異なる2人のユーザーが同時に1つのファイルを編集し始めたと
     きに, そのことを告知するためにファイルロックを利用する.  *Note
     Interlocking::.

ファンクションキー（Function Key）
     ファンクションキーは, どの文字にも対応しない入力を送出するキーボー
     ドのキーである.  *Note Function Keys::.

フレーム（Frame）
     フレームとは, Emacsウィンドウの長方形の集まりである.  Emacsは1つ
     のフレームで始めるがいくつでも作成できる.  各フレームはEmacsウィ
     ンドウ《参照》に分割できる.  Xウィンドウシステムを利用している場
     合には, すべてのフレームを同時に眺めることができる.  *Note
     Frames::.

プレフィックスキー（Prefix Key）
     プレフィックスキーとは, より長いキー列の導入部としてのみ機能する
     キー列である.  `C-x'は, プレフィックスキーの例である.  したがって,
     `C-x'で始まる2文字のキー列は正当なキー列である.  *Note Keys::.

プロンプト（Prompt）
     プロンプトとは, ユーザーに入力を促すために表示されるテキストであ
     る.  プロンプトを表示することをプロンプティングという.  Emacsのプ
     ロンプトは, つねにエコー領域《参照》に現れる.  プロンプトを出す例
     は引数を読むためにミニバッファ（*Note Minibuffer::）を使う場合で
     ある.  長いキー列を打ち込む途中で間を置いたときに起きる表示も, プ
     ロンプトの一種である.  （*Note Echo Area::）.

ページ（Page）
     ページは, テキストの1つの単位であり, 行の先頭のページ送り文字
     （ASCIIのコントロールL, コードは014）で区切られる.  Emacsには, ペー
     ジ間を移動したり, ページを操作するコマンドがある.  *Note Pages::.

変更したバッファ（Modified Buffer）
     バッファを保存してから（あるいは, 新規作成）以降にテキストを変更
     した（あるいは, 一度も保存していない）場合, バッファは変更された
     という.  *Note Saving::.

変数（Variable）
     変数とは, 任意の値を格納できるLispオブジェクトである.  Emacsには, 
     内部目的の変数もあれば, 値を設定してEmacsのふるまいを制御する
     （「ユーザーオプション」《参照》として知られる）変数もある.  読者
     の関心を引くようなEmacsの変数の一覧は, 本書の変数索引にある.  変
     数についての情報は, *Note Variables::.

ポイント（Point）
     ポイントとは, 挿入や削除を行うバッファ内の場所である.  ポイントは,
     2つの文字のあいだにあると考えられ, どちらかの文字にあるのではない. 
     端末のカーソル《参照》はポイントの位置を示す.  *Note Point:
     Basic.
	
訪問（Visiting）
     ファイルを訪問する（訪れる）とは, その内容を編集できるようにバッ
     ファ《参照》に読み込むことである.  *Note Visiting::.

補完（Completion）
     補完とは, 省略された名前からEmacsが自動的に完全な名前に補うことで
     ある.  入力として正しいものが既知の場合には, ミニバッファ《参照》
     引数に対して補完が行われる.  たとえば, コマンド名, バッファ名, ファ
     イル名である.  TAB, SPC, RETを打ち込むと補完が行われる.  *Note
     Completion::.

保存（Saving）
     バッファを保存するとは, そのバッファで訪問《参照》したファイルへ
     バッファのテキストをコピーすることである.  こうすることで, Emacs
     での編集結果が実際にファイル内のテキストに反映される.  *Note
     Saving::.

ボタン押し下げイベント（Button Down Event）
     ボタン押し下げイベントは, マウスボタンが押されるとただちに発生す
     る入力イベントの一種である.  *Note Mouse Buttons::.

マーク（Mark）
     マークは, テキスト内の位置を指し示す.  マークでリージョン《参照》
     の端を指し, ポイントでもう一方の端を指す.  ポイントからマークまで
     のテキスト全体を操作するコマンドが数多くある.  各バッファにはそれ
     ぞれ独自のマークがある.  *Note Mark::.

マークリング（Mark Ring）
     マークリングは, 以前のマークへ戻りたくなった場合に備えて, 最近の
     数個のマークの位置を保持する.  各バッファには独自のマークリングが
     ある.  さらに, グローバルマークリング《参照》が1つある.  *Note
     Mark Ring::.

マイナモード（Minor Mode）
     マイナモードとは, 他のすべての機能とは独立にオン／オフできるEmacs
     のオプションの機能である.  各マイナモードには, 機能をオン／オフす
     るコマンドがある.  *Note Minor Modes::.

マイナモードキーマップ（Minor Mode Keymap）
     マイナモードに属するキーマップのことであり, マイナモードがオンの
     ときに使われる.  ローカルキーマップがグローバルキーマップに優先す
     るように, マイナモードキーマップはバッファのローカルキーマップに
     優先する.  *Note Keymaps::.

抹消（Expunging）
     rmailファイルやdiredバッファにおける抹消とは, 事前に削除の印を付
     けたメッセージやファイルを実際に捨て去る操作である.

マルチバイト文字（Multibyte Character）
     マルチバイト文字とは, バッファの数個の場所を占める文字である.  非
     ASCII文字の個数は256を大幅に超えるので, 非ASCII文字のテキストを表
     現するためにマルチバイト文字を使う.  *Note International Intro::.

ミニバッファ（Minibuffer）
     ミニバッファは, 必要なときにエコー領域《参照》に現れ, コマンドの
     引数を読み取るのに使われる.  *Note Minibuffer::.

ミニバッファ履歴（Minibuffer History）
     ミニバッファ履歴は, それまでにミニバッファ引数に指定したテキスト
     を記録するもので, 同じテキストを再利用するのに便利である.  *Note
     Minibuffer History::.

メイル（Mail）
     メイルとは, コンピュータシステムを介してあるユーザーが他のユーザー
     へ送ったメッセージであり, 受け手の都合のよいときに読んでもらう.
     Emacsには, メイルを書いて送ったり, 受け取ったメイルを読んだり編集
     するコマンドがある.  *Note Sending Mail::.  メイルの読み方は,
     *Note Rmail::.

メイル作成方法（Mail Composition Method）
     メイル作成方法とは, メイルメッセージを編集したり送ったりするため
     のEmacs内で実行できるプログラムである.  Emacsでは何種類かのメイル
     作成方法を選択できる.  *Note Mail Methods::.

メジャーモード（Major Mode）
     Emacsのメジャーモードとは, 互いに排他的なオプションの集まりであり, 
     各メジャーモードは特定種類のテキストを編集するためにEmacsの設定を
     変更する.  理想的には, 各プログラム言語ごとに独自のメジャーモード
     がある.  *Note Major Modes::.

メタ（Meta）
     メタは, コマンド文字に付きうる修飾ビットの名前である.  METAを押し
     下げたまま打ち込んだ文字に付く.  そのような文字は, `Meta-'（普通
     は縮めて`M-'）で始まる名前になる.  たとえば, `M-<'は, METAを押し
     下げたまま（ほとんどの端末では, SHIFTを押し下げたまま`,'を打ち）
     `<'を打ち込む.  *Note Meta: User Input.

メタ文字（Meta Character）
     メタ文字とは, メタビットが立っている文字コードである.

メッセージ（Message）
     「メイル」を参照.

メッセージの削除（Deletion of Messages）
     メッセージの削除とは, メイルファイルから除去する旨の印（削除印）
     を付けることである.  rmailファイルを抹消（expunge）《参照》しない
     限り, 削除したメッセージを復元できる.  *Note Rmail Deletion::.

メニューバー（Menu Bar）
     メニューバーはEmacsフレームの最上段にある.  これには, マウスでク
     リックしてメニューを出すための単語が並んでいる.  メニューバーの機
     能は, X上でのみ利用できる.  *Note Menu Bars::.

モード行（Mode Line）
     モード行とは, 各ウィンドウ《参照》のいちばん底にある行であり, ウィ
     ンドウに表示中のバッファの状態に関する情報を与える.  *Note Mode
     Line::.

文字（Character）
     文字はEmacsバッファの内容を構成する.  *Note Text Characters::. 
     また, キー列《参照》は, （他の入力イベントを含むこともあるが）通
     常, 文字から成る.  *Note User Input::.

文字集合（Character Set）
     Emacsでは, 特定のアルファベットや文書を表現する多くの文字集合を使
     える.  *Note International::.

文字列（String）
     文字列とは, Lispのデータオブジェクトの一種であり, 文字の列を持つ.
     Emacsの数多くの変数は, 値として文字列をとることを意図している. 
     文字列を表すLispの構文では, 文字列の始めに`"'があり, 文字列の終り
     に`"'がある.  文字列に`"'を含めるには`\"'と書き, 文字列に`\'を含
     めるには`\\'と書く.  改行を含む他のすべての文字は, 文字列に含めて
     書けばよい.  なお, 改行を表す`\n', 8進文字コードを表す`\241'のよ
     うなCのバックスラッシュ表現も許される.

文字列置換（String Substitution）
     「グローバル置換」を参照.

ヤンク（Yanking）
     ヤンクとは, 以前にキルしたテキストを再挿入することである.  誤った
     キルを取り消したり, テキストの移動やコピーに利用できる.  他のシス
     テムでは『ペースト』と呼ぶ.  *Note Yanking::.
ユーザーオプション（User Option）
     ユーザーオプションとは, 新たな値を設定してEmacsのカスタマイズを可
     能にする変数《参照》である.  *Note Variables::.

読み出し専用バッファ（Read-Only Buffer）
     読み出し専用バッファとは, 変更が許されないテキストを持つバッファ
     である.  通常, Emacsにとって重要な意味を持ったテキストを含むバッ
     ファは読み出し専用になる.  たとえば, diredバッファである.  書き込
     み禁止のファイルを訪れても, バッファは読み出し専用になる.  *Note
     Buffers::.

リージョン（Region）
     リージョンとは, ポイント《参照》とマーク《参照》のあいだにあるテ
     キストである.  数多くのコマンドがリージョンのテキストを操作する.
     *Note Region: Mark.

リスト（List）
     リストとは, おおざっぱにいえば, 開き括弧で始まり対応する閉じ括弧
     で終るテキスト文字列である.  Cモードや他のLisp以外のモードでは, 
     言語にとって適切な対応をとる中括弧などの区切り文字で囲んだものも
     リストとみなす.  Emacsには, リストにさまざまな操作を行う特別なコ
     マンドがある.  *Note Lists::.

略語（Abbrev）
     略語とは, バッファ内では別のテキスト文字列に展開されるテキスト文
     字列のこと.  たとえば, 頻繁に挿入する長い句に対して数個の文字から
     成る略語を定義する.  *Note Abbrevs::.

レジスタ（Registers）
     レジスタとは, あとで使えるように, テキスト, バッファの位置, 矩形
     領域を保持できる名前が付いた場所である.  *Note Registers::.

ローカル（Local）
     ローカル（局所的）とは, 「特定の文脈だけに影響する」という意味で
     ある.  特定の文脈とは, 関数の実行, バッファ, メジャーモードなどで
     ある.  これは, グローバル（大域的）《参照》とは反対の概念である.
     Emacsにおける「ローカル」の用法の例は以下ある.

ローカルキーマップ（Local Keymap）
     ローカルキーマップは, 特定のメジャーモードで使われる.  現在のロー
     カルキーマップのキーバインド《参照》は, 同じキー列に対するグロー
     バルなバインドに優先する.  *Note Keymaps::.

ローカル変数（Local Variable）
     1つのバッファのみに適用される変数《参照》のローカルな値.  *Note
     Locals::.

ローカル略語（Local Abbrev）
     ローカル略語の定義は, 特定のメジャーモードが選ばれているときだけ
     有効である.  そのメジャーモードでは, 同じ略語のグローバルな定義に
     優先する.  *Note Abbrevs::.

ワイドニング（Widening）
     ワイドニングとは, カレントバッファの制限《参照》を取り去ることで
     ある.  ナロイング《参照》の反対である.  *Note Narrowing::.




File: emacs-ja  Node: Glossary-Footnotes, Up: Glossary

(1) 【訳注】Muleでは, quailマイナモードを起動する`quail-mode'
にバインドされていた.


File: emacs-ja, Node: Acknowledgments, Next: Screen, Prev: Concept Index, Up: Top

Acknowledgments
***************

Many people have contributed code included in the Free Software
Foundation's distribution of GNU Emacs.  To show our appreciation for
their public spirit, we list here those who have written substantial
portions.

   * Per Abrahamsen wrote the customization buffer facilities, as well
     as `double.el' for typing accented characters not normally
     available from the keyboard, `xt-mouse.el' which handles mouse
     commands through Xterm, and `cpp.el' which hides or highlights
     parts of C programs according to preprocessor conditionals.

   * Jay K. Adams wrote `jka-compr.el', providing automatic
     decompression and recompression for compressed files.

   * Joe Arceneaux wrote the original text property implementation,
     and implemented support for X11.

   * Boaz Ben-Zvi wrote `profile.el', to time Emacs Lisp functions.

   * Jim Blandy wrote Emacs 19's input system, brought its
     configuration and build process up to the GNU coding standards,
     and contributed to the frame support and multi-face support.

   * Terrence M. Brannon wrote `landmark.el', a neural-network robot
     that learns landmarks.

   * Frank Bresz wrote `diff.el', a program to display `diff' output.

   * Peter Breton implemented `dirtrack' which does better tracking of
     directory changes in shell buffers, `filecache.el' which records
     which directories your files are in, `locate.el' which interfaces
     to the `locate' command, `net-utils.el', and the "generic mode"
     feature.

   * Kevin Broadey wrote `foldout.el', providing folding extensions to
     Emacs's outline modes.

   * Vincent Broman wrote `ada.el', a mode for editing Ada code (since
     replaced by `ada-mode.el').

   * David M. Brown wrote `array.el', for editing arrays and other
     tabular data.

   * Bill Carpenter provided `feedmail.el'.

   * Hans Chalupsky wrote `advice.el', an overloading mechanism for
     Emacs Lisp functions, and `trace.el', a tracing facility for
     Emacs Lisp.

   * Bob Chassell wrote `texnfo-upd.el' and `makeinfo.el', modes and
     utilities for working with Texinfo files.

   * James Clark wrote `sgml-mode.el', a mode for editing SGML
     documents, and contributed to Emacs's dumping procedures.

   * Mike Clarkson wrote `edt.el', an emulation of DEC's EDT editor.

   * Glynn Clements provided `gamegrid.el' and a couple of games that
     use it, Snake and Tetris.

   * Andrew Csillag wrote M4 mode (`m4-mode.el').

   * Doug Cutting and Jamie Zawinski wrote `disass.el', a disassembler
     for compiled Emacs Lisp code.

   * Michael DeCorte wrote `emacs.csh', a C-shell script that starts a
     new Emacs job, or restarts a paused Emacs if one exists.

   * Gary Delp wrote `mailpost.el', an interface between RMAIL and the
     `/usr/uci/post' mailer.

   * Matthieu Devin wrote `delsel.el', a package to make newly-typed
     text replace the current selection.

   * Eric Ding contributed `goto-addr.el',

   * Carsten Dominik wrote `reftex.el', a package for setting up
     labels and cross-references for LaTeX.

   * Scott Draves wrote `tq.el', help functions for maintaining
     transaction queues between Emacs and its subprocesses.

   * Viktor Dukhovni wrote support for dumping under SunOS version 4.

   * John Eaton co-wrote Octave mode (`octave.el' and related files).

   * Rolf Ebert co-wrote Ada mode (`ada-mode.el').

   * Stephen Eglen implemented `mspools.el', for use with Procmail,
     which tells you which mail folders have mail waiting in them, and
     `iswitchb.el', a feature for incremental reading and completion
     of buffer names.

   * Torbj"orn Einarsson contributed F90 mode (`f90.el').

   * Tsugutomo Enami co-wrote the support for international character
     sets.

   * Hans Henrik Eriksen wrote `simula.el', a mode for editing SIMULA
     87 code.

   * Michael Ernst wrote `reposition.el', a command for recentering a
     function's source code and preceding comment on the screen.

   * Ata Etemadi wrote `cdl.el', functions for working with Common
     Data Language source code.

   * Frederick Farnback implemented `morse.el', which converts text to
     morse code.

   * Fred Fish wrote the support for dumping COFF executable files.

   * Karl Fogel wrote:
        * `bookmark.el', for creating named placeholders, saving them
          and jumping to them later,
        * `mail-hist.el', a history mechanism for outgoing mail
          messages, and
        * `saveplace.el', for preserving point's location in files
          between editing sessions.

   * Gary Foster wrote the emulation for CRiSP: `crisp.el' and
     `scroll-lock.el'.

   * Noah Friedman wrote `rlogin.el', an interface to Rlogin, and
     `type-break.el', which reminds you to take periodic breaks from
     typing.  With Roland McGrath, he wrote `rsz-mini.el', a minor
     mode to automatically resize the minibuffer to fit the text it
     contains.

   * Keith Gabryelski wrote `hexl.el', a mode for editing binary
     files.

   * Kevin Gallagher rewrote and enhanced the EDT emulation, and wrote
     `flow-ctrl.el', a package for coping with unsuppressible XON/XOFF
     flow control.

   * Kevin Gallo added multiple-frame support for Windows NT.

   * Howard Gayle wrote:
        * the C and lisp code for display tables and case tables,
        * `rot13.el', a command to display the plaintext form of a
          buffer encoded with the Caesar cipher,
        * much of the support for the ISO-8859 European character set
          (which includes `iso-ascii.el', `iso-insert.el',
          `iso-swed.el', `iso-syntax.el', `iso-transl.el', and
          `swedish.el'), and
        * `vt100-led.el', a package for controlling the LED's on
          VT100-compatible terminals.

   * Stephen Gildea made the Emacs quick reference card.

   * David Gillespie wrote:
        * Emacs 19's Common Lisp compatibility packages, replacing the
          old package by Cesar Augusto Quiroz Gonzalez,
        * `complete.el', a partial completion mechanism, and
        * `edmacro.el', a package for editing keyboard macros.

   * Bob Glickstein contributed the `sregex.el' feature.

   * Boris Goldowsky wrote `avoid.el', a package to keep the mouse
     cursor out of the way of the text cursor; `shadowfile.el', a
     package for keeping identical copies of files in more than one
     place; `enriched.el', a package for saving text properties in
     files; and `facemenu.el', a package for specifying faces.

   * Michelangelo Grigni wrote `ffap.el' which visits a file, taking
     the file name from the buffer.

   * Odd Gripenstam wrote `dcl-mode.el'.

   * Michael Gschwind wrote `iso-cvt.el', a package to convert between
     the ISO 8859-1 character set and the notations for non-`ASCII'
     characters used by TeX and net tradition.

   * Henry Guillaume wrote `find-file.el', a package to visit files
     related to the currently visited file.

   * Doug Gwyn wrote the portable `alloca' implementation.

   * Ken'ichi Handa implemented most of the support for international
     character sets.

   * Chris Hanson wrote `netuname.el', a package to use HP-UX's Remote
     File Access facility from Emacs.

   * K. Shane Hartman wrote:
        * `chistory.el' and `echistory.el', packages for browsing
          command history lists,
        * `electric.el' and `helper.el', providing an alternative
          command loop and appropriate help facilities,
        * `emacsbug.el', a package for reporting Emacs bugs,
        * `picture.el', a mode for editing ASCII pictures, and
        * `view.el', a package for perusing files and buffers without
          editing them.

   * John Heidemann wrote `mouse-copy.el' and `mouse-drag.el', which
     provide alternative mouse-based editing and scrolling features.

   * Markus Heritsch co-wrote Ada mode (`ada-mode.el').

   * Karl Heuer wrote the original blessmail script, implemented the
     `intangible' text property, and rearranged the structure of the
     `Lisp_Object' type to allow for more data bits.

   * Manabu Higashida ported Emacs to the MS-DOS operating system.

   * Anders Holst wrote `hippie-exp.el', a versatile completion and
     expansion package.

   * Kurt Hornik co-wrote Octave mode (`octave.el' and related files).

   * Tom Houlder wrote `mantemp.el', which generates manual C++
     template instantiations.

   * Lars Ingebrigtsen did a major redesign of the GNUS newsreader.

   * Andrew Innes contributed extensively to the Windows NT support.

   * Kyle Jones wrote `life.el', a package to play Conway's "life"
     game, and `mldrag.el', a package which allows the user to resize
     windows by dragging mode lines and vertical window separators
     with the mouse.

   * Tomoji Kagatani implemented `smtpmail.el', used for sending out
     mail with SMTP.

   * David Kaufman wrote `yow.c', an essential utility program for the
     hopelessly pinheaded.

   * Henry Kautz wrote `bib-mode.el', a mode for maintaining
     bibliography databases compatible with `refer' (the `troff'
     version) and `lookbib', and `refbib.el', a package to convert
     those databases to the format used by the LaTeX text formatting
     package.

   * Howard Kaye wrote `sort.el', commands to sort text in Emacs
     buffers.

   * Michael Kifer wrote `ediff.el', an interactive interface to the
     `diff' and `patch' programs, and Viper, the newest emulation for
     VI.

   * Richard King wrote the first version of `userlock.el' and
     `filelock.c', which provide simple support for multiple users
     editing the same file.

   * Larry K. Kolodney wrote `cvtmail.c', a program to convert the
     mail directories used by Gosling Emacs into RMAIL format.

   * Robert Krawitz wrote the original `xmenu.c', part of Emacs's
     pop-up menu support.

   * Sebastian Kremer wrote Emacs 19's `dired-mode', with
     contributions by Lawrence R. Dodd.

   * Geoff Kuenning wrote Emacs 19's `ispell.el', based on work by Ken
     Stevens and others.

   * David K*agedal wrote `tempo.el', providing support for easy
     insertion of boilerplate text and other common constructions.

   * Daniel LaLiberte wrote:
        * `edebug.el', a source-level debugger for Emacs Lisp,
        * `cl-specs.el', specifications to help `edebug' debug code
          written using David Gillespie's Common Lisp support,
        * `cust-print.el', a customizable package for printing lisp
          objects,
        * `eval-reg.el', a re-implementation of `eval-region' in Emacs
          Lisp, and
        * `isearch.el', Emacs 19's incremental search minor mode.

   * James R. Larus wrote `mh-e.el', an interface to the MH mail
     system.

   * Frederic Lepied contributed `expand.el', which uses the abbrev
     mechanism for inserting programming constructs.

   * Lars Lindberg wrote `msb.el', which provides more flexible menus
     for buffer selection, and rewrote `dabbrev.el'.

   * Eric Ludlam wrote the Speedbar package and `checkdoc.el'.

   * Neil M. Mager wrote `appt.el', functions to notify users of their
     appointments.  It finds appointments recorded in the diary files
     generated by Edward M. Reingold's `calendar' package.

   * Ken Manheimer wrote `allout.el', a mode for manipulating and
     formatting outlines, and `icomplete.el', which provides
     incremental completion feedback in the minibuffer.

   * Bill Mann wrote `perl-mode.el', a mode for editing Perl code.

   * Brian Marick and Daniel LaLiberte wrote `hideif.el', support for
     hiding selected code within C `#ifdef' clauses.

   * Simon Marshall wrote:
        * `fast-lock.el', which caches the face data computed by Font
          Lock mode,
        * `lazy-lock.el', which delays fontification in Font Lock mode
          until text is actually displayed, and
        * `regexp-opt.el', which generates a regular expression from a
          list of strings.

   * Bengt Martensson, Mark Shapiro, Mike Newton, Aaron Larson, and
     Stefan Schoef, wrote `bibtex.el', a mode for editing BibTeX
     bibliography files.
 
   * Charlie Martin wrote `autoinsert.el', which provides automatic
     mode-sensitive insertion of text into new files.

   * Thomas May wrote `blackbox.el', a version of the traditional
     blackbox game.

   * Roland McGrath wrote:
        * `compile.el', a package for running compilations in a
          buffer, and then visiting the locations reported in error
          messages,
        * `etags.el', a package for jumping to function definitions
          and searching or replacing in all the files mentioned in a
          `TAGS' file,
        * `find-dired.el', for using `dired' commands on output from
          the `find' program, with Sebastian Kremer,
        * `map-ynp.el', a general purpose boolean question-asker,
        * `autoload.el', providing semi-automatic maintenance of
          autoload files, and
        * `upd-copyr.el', providing semi-automatic maintenance of
          copyright notices in source code.

   * David Megginson wrote `derived.el', which allows one to define
     new major modes by inheriting key bindings and commands from
     existing major modes.

   * Wayne Mesard wrote `hscroll.el' which does horizontal scrolling
     automatically.

   * Richard Mlynarik wrote:
        * `cl-indent.el', a package for indenting Common Lisp code,
        * `ebuff-menu.el', an "electric" browser for buffer listings,
        * `ehelp.el', bindings for browsing help screens,
        * `rfc822.el', a parser for E-mail addresses in the RFC-822
          format, used in mail messages and news articles,
        * `terminal.el', a terminal emulator for Emacs subprocesses,
          and
        * `yow.el', an essential utility (try `M-x yow').

   * Keith Moore wrote `aixcc.lex', a pre-processor designed to help
     Emacs parse the error messages produced by the AIX C compiler.

   * Erik Naggum wrote the time-conversion functions, and has tested
     the latest source code daily.

   * Thomas Neumann and Eric Raymond wrote `makefile.el', a mode for
     editing makefiles.

   * Jurgen Nickelsen wrote `ws-mode.el', providing WordStar
     emulation.

   * Jeff Norden wrote `kermit.el', a package to help the Kermit
     dialup communications program run comfortably in an Emacs shell
     buffer.

   * Andrew Norman wrote `ange-ftp.el', providing transparent FTP
     support.

   * Jeff Peck wrote:
        * `emacstool.c', support for running Emacs under SunView/Sun
          Windows,
        * `sun-curs.el', cursor definitions for Sun Windows, and
        * `sun-fns.el', providing mouse support for Sun Windows.

   * Damon Anton Permezel wrote `hanoi.el', an animated demonstration
     of the "Towers of Hanoi" puzzle.

   * Jens Petersen wrote `find-func.el', which makes it easy to find
     the source code for an Emacs Lisp function or variable.

   * Daniel Pfeiffer wrote:
        * `executable.el'
        * `sh-script.el', a mode for editing shell scripts,
        * `skeleton.el', implementing a concise language for writing
          statement skeletons, and
        * `two-column.el', a minor mode for simultaneous two-column
          editing.

   * Fred Pierresteguy and Paul Reilly made Emacs work with X Toolkit
     widgets.

   * Christian Plaunt wrote `soundex.el', an implementation of the
     Soundex algorithm for comparing English words by their
     pronunciation.

   * Francesco A. Potorti wrote `cmacexp.el', providing a command
     which runs the C preprocessor on a region of a file and displays
     the results.

   * Michael D. Prange and Steven A. Wood wrote `fortran.el', a mode
     for editing FORTRAN code.

   * Ashwin Ram wrote `refer.el', commands to look up references in
     bibliography files by keyword.

   * Eric S. Raymond wrote:
        * `vc.el', an interface to the RCS and SCCS source code
          version control systems, with Paul Eggert,
        * `gud.el', a package for running source-level debuggers like
          GDB and SDB in Emacs,
        * `asm-mode.el', a mode for editing assembly language code,
        * `cookie1.el', support for "fortune-cookie" programs like
          `yow.el' and `spook.el',
        * `finder.el', a package for finding Emacs Lisp packages by
          keyword and topic,
        * `lisp-mnt.el', functions for working with the special
          headers used in Emacs Lisp library files, and
        * code to set and make use of the `load-history' lisp
          variable, which records the source file from which each lisp
          function loaded into Emacs came.

   * Edward M. Reingold wrote the extensive calendar and diary support
     (try `M-x calendar'), with contributions from Stewart Clamen,
     Paul Eggert, and Lara Rios.  Andy Oram contributed to its
     documentation.  Reingold has also contributed to `tex-mode.el', a
     mode for editing TeX files, as have William F. Schelter, Dick
     King, Stephen Gildea, Michael Prange, and Jacob Gore.

   * Rob Riepel contributed `tpu-edt.el' and its associated files,
     providing an emulation of the VMS TPU text editor emulating the
     VMS EDT editor, and `vt-control.el', providing some control
     functions for the DEC VT line of terminals.

   * Roland B. Roberts contributed much of the VMS support distributed
     with Emacs 19, along with Joseph M. Kelsey, and `vms-pmail.el',
     support for using Emacs within VMS MAIL.

   * John Robinson wrote `bg-mouse.el', support for the mouse on the
     BBN Bitgraph terminal.

   * Danny Roozendaal implemented `handwrite.el', which converts text
     into "handwriting."

   * William Rosenblatt wrote `float.el', implementing a
     floating-point numeric type using Lisp cons cells and integers.

   * Guillermo J. Rozas wrote `scheme.el', a mode for editing Scheme
     code, and `fakemail.c', an interface to the System V mailer.

   * Ivar Rummelhoff provided `winner.el', which records recent window
     configurations so you can move back to them.

   * Wolfgang Rupprecht contributed Emacs 19's floating-point support
     (including `float-sup.el' and `floatfns.c'), and `sup-mouse.el',
     support for the Supdup mouse on lisp machines.

   * James B. Salem and Brewster Kahle wrote `completion.el',
     providing dynamic word completion.

   * Masahiko Sato wrote `vip.el', an emulation of the VI editor.

   * William Schelter wrote `telnet.el', support for `telnet' sessions
     within Emacs.

   * Ralph Schleicher contributed `battery.el', a package for
     displaying laptop computer battery status, and `info-look.el', a
     package for looking up Info documentation for symbols in the
     buffer.

   * Gregor Schmid wrote `tcl.el', a mode for editing Tcl/Tk scripts.

   * Michael Schmidt and Tom Perrine wrote `modula2.el', a mode for
     editing Modula-2 code, based on work by Mick Jordan and Peter
     Robinson.

   * Ronald S. Schnell wrote `dunnet.el', a text adventure game.

   * Philippe Schnoebelen wrote `gomoku.el', a Go Moku game played
     against Emacs, and `mpuz.el', a multiplication puzzle.

   * Randal Schwartz wrote `pp.el', a pretty-printer for lisp objects.

   * Manuel Serrano contributed the Flyspell package that does spell
     checking as you type.

   * Stanislav Shalunov wrote `uce.el', for responding to unsolicited
     commercial email.

   * Richard Sharman contributed `hilit-chg.el', which uses colors to
     inclidate recent editing changes.

   * Olin Shivers wrote:
        * `comint.el', a library for modes running interactive
          command-line- oriented subprocesses,
        * `cmuscheme.el', for running inferior Scheme processes,
        * `inf-lisp.el', for running inferior Lisp process, and
        * `shell.el', for running inferior shells.

   * Sam Shteingold wrote `gulp.el'.

   * Espen Skoglund wrote `pascal.el', a mode for editing Pascal code.

   * Rick Sladkey wrote `backquote.el', a lisp macro for creating
     mostly-constant data.

   * Lynn Slater wrote `help-macro.el', a macro for writing
     interactive help for key bindings.

   * Chris Smith wrote `icon.el', a mode for editing Icon code.

   * David Smith wrote `ielm.el', a mode for interacting with the
     Emacs Lisp interpreter as a subprocess.

   * Paul D. Smith wrote `snmp-mode.el'.

   * William Sommerfeld wrote `scribe.el', a mode for editing Scribe
     files, and `server.el', a package allowing programs to send files
     to an extant Emacs job to be edited.

   * Michael Staats wrote `pc-select.el', which rebinds keys for
     selecting regions to follow many other systems.

   * Ake Stenhoff and Lars Lindberg wrote `imenu.el', a framework for
     browsing indices made from buffer contents.

   * Peter Stephenson contributed `vcursor.el', which implements a
     "virtual cursor" that you can move with the keyboard and use for
     copying text.

   * Sam Steingold wrote `midnight.el'.

   * Jonathan Stigelman wrote `hilit19.el', a package providing
     automatic highlighting in source code buffers, mail readers, and
     other contexts.

   * Steve Strassman did not write `spook.el', and even if he did, he
     really didn't mean for you to use it in an anarchistic way.

   * Jens T. Berger Thielemann wrote `word-help.el', which is part of
     the basis for `info-look.el'.

   * Spencer Thomas wrote the original `dabbrev.el', providing a
     command which completes the partial word before point, based on
     other nearby words for which it is a prefix.  He also wrote the
     original dumping support.

   * Jim Thompson wrote `ps-print.el', which converts Emacs text to
     Postscript.

   * Masanobu Umeda wrote:
        * GNUS, a featureful reader for Usenet news,
        * `prolog.el', a mode for editing Prolog code,
        * `rmailsort.el', a package for sorting messages in RMAIL
          folders,
        * `metamail.el', an interface to the Metamail program,
        * `tcp.el', emulation of the `open-network-stream' function
          for some Emacs configurations which lack it, and
        * `timezone.el', providing functions for dealing with time
          zones.

   * Neil W. Van Dyke wrote `webjump.el', a "hot links" package.

   * Ulrik Vieth implemented `meta-mode.el', for editing MetaFont
     code.

   * Geoffrey Voelker wrote the Windows NT support.

   * Johan Vromans wrote `forms.el' and its associated files, defining
     a mode for filling in forms, and `iso-acc.el', a minor mode
     providing electric accent keys for text using the ISO-8859
     character set.

   * Barry Warsaw wrote:
        * `assoc.el', a set of utility functions for working with
          association lists,
        * `cc-mode.el', a major mode for editing C and C++ code, based
          on earlier work by Dave Detlefs, Stewart Clamen, and Richard
          Stallman,
        * `elp.el', a new profiler for Emacs Lisp programs.
        * `man.el', a mode for reading UNIX manual pages,
        * `regi.el', providing an AWK-like control structure for use
          in lisp programs, and
        * `reporter.el', providing customizable bug reporting for lisp
          packages.
        * `supercite.el', a minor mode for quoting sections of mail
          messages and news articles,

   * Morten Welinder wrote:
        * `desktop.el', facilities for saving some of Emacs's state
          between sessions,
        * `s-region.el', commands for setting the region using the
          shift key and motion commands, and
        * `dos-fns.el', functions for use under MS-DOS.

     He also helped port Emacs to MS-DOS.

   * Joseph Brian Wells wrote:
        * `apropos.el', a command to find commands, functions, and
          variables whose names contain matches for a regular
          expression,
        * `resume.el', support for processing command-line arguments
          after resuming a suspended Emacs job, and
        * `mail-extr.el', a package for extracting names and addresses
          from mail headers, with contributions from Jamie Zawinski.

   * Rodney Whitby and Reto Zimmermann wrote `vhdl-mode.el'.

   * Ed Wilkinson wrote `b2m.c', a program to convert mail files from
     RMAIL format to Unix `mbox' format.

   * Mike Williams wrote `mouse-sel.el', providing enhanced mouse
     selection, and `thingatpt.el', a library of functions for finding
     the "thing" (word, line, s-expression) containing point.

   * Dale R. Worley wrote `emerge.el', a package for interactively
     merging two versions of a file.

   * Tom Wurgler wrote `emacs-lock.el', which makes it harder to exit
     with valuable buffers unsaved.

   * Eli Zaretskii made many standard Emacs features work on MS-DOS.

   * Jamie Zawinski wrote:
        * Emacs 19's optimizing byte compiler, with Hallvard Furuseth,
        * much of the support for faces and X selections,
        * `mailabbrev.el', a package providing automatic expansion of
          mail aliases, and
        * `tar-mode.el', providing simple viewing and editing commands
          for tar files.

   * Ian T. Zimmerman wrote `gametree.el'.

   * Neal Ziring and Felix S. T. Wu wrote `vi.el', an emulation of the
     VI text editor.

Others too numerous to mention have reported and fixed bugs, and added
features to many parts of Emacs.  We thank them for their generosity
as well.

This list intended to mention every contributor of a major package or
feature we currently distribute; if you know of someone we have
omitted, please report that as a manual bug.



